#!/usr/bin/env bash

# Create a new directory and enter it
function mkd()
{
	mkdir -p "$@" && cd "$_";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz()
{
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`â€¦";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs()
{
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# colored man pages
man()
{
	env \
		LESS_TERMCAP_mb=$(printf "\e[1;31m") \
		LESS_TERMCAP_md=$(printf "\e[1;31m") \
		LESS_TERMCAP_me=$(printf "\e[0m") \
		LESS_TERMCAP_se=$(printf "\e[0m") \
		LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
		LESS_TERMCAP_ue=$(printf "\e[0m") \
		LESS_TERMCAP_us=$(printf "\e[1;32m") \
			man "$@"
}

function weather()
{
	if [[ -n $@ ]]; then
		place=$@
	else
		place=${current_city}
	fi
	curl -s -A curl "wttr.in/$place" | head -n 38
}

function moon()
{
	curl -s -A curl "wttr.in/Moon" | head -n 23
}

# display a selected image in feh while allowing to browse all other images in
# the directory as well
function feh-browser()
{
	feh --start-at ./$@
}

# shrink all images using tips from
# https://developers.google.com/speed/docs/insights/OptimizeImages
# usage: shrink_photos FILE OUTDIR or shrink_photos DIR OUTDIR
shrink_photos()
{
	if [ -f $1 ]
	then
		images=$1
	else
		images=`find $1 -maxdepth 1 -iname '*.j[pe]*g'`
	fi

	if [ ! $2 ]
	then
		outdir="tb"
	else
		outdir=$2
	fi

	if [ ! -d $outdir ]
	then
		mkdir $outdir
	fi

	for photo in $images
	do
		echo "Working on" $photo "->" ${outdir}/${photo##*/}
		convert $photo -sampling-factor 4:2:0 -strip -resize 888x666 -quality 85 -interlace JPEG -colorspace sRGB $outdir/${photo##*/} || echo -e "ERROR in $photo \n"
	done
}


# Send message to Matrix using https://t2bot.io/webhooks
# two usage types:
# $ alert-matrix MESSAGE
# $ some command; alert-matrix # when command finishes, send it to matrix
alert-matrix()
{
	format="plain"
	if [ $1 ]
	then
		message=$@
	else
		message=$(history | tail -n 1 | sed -e 's/^\s*[0-9]\+\s*//;s/[;&|]\s*alert-matrix *$//')
		message="<code>"${message//\"/\'}"</code>"
		format="html"
	fi

	json='
	{
	      "text": "message",
	      "format": "FORMAT",
	      "displayName": "Sender",
	      "avatarUrl": "https://heitorpb.github.io/assets/favicon.png"
	}'

	json=${json/message/$message}
	json=${json/FORMAT/$format}
	json=${json/Sender/$HOSTNAME}

	curl --header "Content-Type: application/json" \
	     --request POST \
	     --data "$json" \
	     $MATRIX_WEBHOOK_URL
}
